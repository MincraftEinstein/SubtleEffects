plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
}

repositories {
    maven {
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }
}

neoForge {
    version = neoforge_version

    accessTransformers.from(project(":common").file('src/main/resources/META-INF/accesstransformer.cfg'))

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_version
    }

    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric

            def dir = project.getLayout().getProjectDirectory().dir('runs/' + it.name)
            if (!dir.asFile.exists()) {
                dir.asFile.mkdir()
            }
            getGameDirectory().convention(dir)
        }

        client {
            client()
        }

        server {
            server()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation("me.fzzyhmstrs:fzzy_config:${fzzy_config_version}+neoforge")
    compileOnly("com.github.glitchfiend:GlitchCore-neoforge:${glitchcore_version}")
    compileOnly("com.github.glitchfiend:SereneSeasons-neoforge:${serene_seasons_version}")
    compileOnly("it.crystalnest:soul-fire-d-neoforge:${soul_fired_version}")
    compileOnly("maven.modrinth:iceberg:${neoforge_iceberg_version}")
    compileOnly("maven.modrinth:prism-lib:${neoforge_prism_version}")
    compileOnly("maven.modrinth:item-borders:${neoforge_item_borders_version}")
}