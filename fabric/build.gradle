plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven {
        url = "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")
    modImplementation "me.fzzyhmstrs:fzzy_config:${fzzy_config_version}"
    modCompileOnly "com.github.glitchfiend:GlitchCore-fabric:${glitchcore_version}"
    modCompileOnly "com.github.glitchfiend:SereneSeasons-fabric:${serene_seasons_version}"
    modCompileOnly "it.crystalnest:soul-fire-d-fabric:${soul_fired_version}"
    modCompileOnly "maven.modrinth:iceberg:${fabric_iceberg_version}"
    modCompileOnly "maven.modrinth:prism-lib:${fabric_prism_version}"
    modCompileOnly "maven.modrinth:item-borders:${fabric_item_borders_version}"
}

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

processResources {
    exclude('META-INF/accesstransformer.cfg')
}
